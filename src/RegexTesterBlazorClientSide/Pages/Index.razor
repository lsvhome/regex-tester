@page "/"
@inherits IndexModel;
@using System.Text.RegularExpressions;

<h1>C# Regex Tester</h1>

Text:
<br />
<textarea id="fdfgc" rows="5" class="wide" @bind="@Text" @oninput="@ReCalcText">
</textarea>
<br />

<button @onclick="@(()=>{RegexOptionsVisible=!RegexOptionsVisible;})">RegexOptions</button>
<br />

<ul style="display: @(RegexOptionsVisible ? "block":"none")">
    @foreach (var each in Enum.GetNames(typeof(RegexOptions)))
    {
        <li>
            <input id="regexoptions" type="checkbox" value="@each" @onchange=@(async eventArgs => { await RegexOptionsChanged(each, (bool)eventArgs.Value); }) />
            <label for="regexoptions">@each</label>
        </li>
    }
</ul>

<br />

<a target="_blank" href="https://docs.microsoft.com/dotnet/standard/base-types/regular-expression-language-quick-reference">regex manual</a>
&nbsp;|&nbsp;
<a target="_blank" href="https://github.com/lsvhome/regex-tester/issues">issue tracker</a>
<br />
<br />

<input type="radio" id="pattern" name="regexsourceradio" checked="@(RegexSource == RegexSourceEnum.Pattern)" @onchange="@(() => RegexSource = RegexSourceEnum.Pattern)" />
<label for="patterninput">Pattern:</label>
<br />
<input id="patterninput" type="text" class="wide" @bind="@TextPattern" @oninput="@ReCalcPattern" disabled="@(RegexSource != RegexSourceEnum.Pattern)" />
<br />

<input type="radio" id="code" name="regexsourceradio" checked="@(RegexSource == RegexSourceEnum.CsCode)" @onchange="@(() => { RegexSource = RegexSourceEnum.CsCode; })" />
<label for="codeinput">C# Regex code for matching:</label>
<br />
<input id="codeinput" type="text" class="wide" @bind="@CsCode" @oninput="@ReCalcCode" disabled="@(RegexSource != RegexSourceEnum.CsCode)" />
<br />

<br />
<input id="autoruncheckbox" type="checkbox" @bind="@Autorun" /> <label for="autoruncheckbox">AutoRun</label>
<br />
<button @onclick="@ReCalc">Run</button>
<br />
<br />

Results: @Error
<br />

@if (Matches != null)
{
    @GetDecoratedTextWithMatches()
}

<br />
<br />
<br />

@code
{
}
